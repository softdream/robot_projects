#include <iostream>
#include "image_utils.h"

#include "image_stream.h"

extern "C" {
#include "sp_codec.h"
#include "sp_sys.h"
}
// -------------------------- GLOBAL DATA -------------------------- //
stream::ImageStream image_stream;
cv::VideoCapture cap(8);

void* encoder = nullptr;

int cnt = 0;

void imageProcessCallback( cv::Mat& image, char* buffer, int& size )
{
	std::cout<<"recv cnt = "<<cnt ++<<std::endl;
	cap >> image;
	if ( image.empty() ) return;

	cv::resize( image, image, cv::Size( WIDTH, HEIGHT ) );
	cv::imshow( "video", image );

	// cv::Mat to nv12
	/*cv::Mat nv12_img;
        int c_ret = ImageUtils::BGRToNv12( image, nv12_img );
        std::cout<<"convert ret = "<<c_ret<<std::endl;

	// encode
	c_ret = sp_encoder_set_frame( encoder, (char *)nv12_img.data, WIDTH * HEIGHT * 3 / 2 );
        if ( c_ret != 0 ) {
                std::cerr<<"Failed to encode the data !"<<std::endl;
        }

	size = sp_encoder_get_stream( encoder, buffer );
        std::cout<<"encoded size = "<<size<<std::endl;
*/
}

int main()
{
	std::cout<<"------------------------ IMAGES STREAM -----------------------"<<std::endl;

        if ( !cap.isOpened() ) {
                std::cout<<"Camera Open Failed !"<<std::endl;
                return 0;
        }
        std::cout<<"Open the Camera !"<<std::endl;

/*	encoder = sp_init_encoder_module();
	if ( encoder == nullptr ) {
		std::cerr<<"init encoder failed !"<<std::endl;
                return 0;
	}
	
	int ret = sp_start_encode( encoder, 0, SP_ENCODER_MJPEG, WIDTH, HEIGHT, 512 );
        if ( ret != 0 ) {
                std::cerr<<"Error to start encoder !"<<std::endl;
                return 0;
        }
*/

	image_stream.registerCallBack( imageProcessCallback );
	image_stream.spin();

	return 0;
}
