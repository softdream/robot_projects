#include <stdio.h>
#include <fcntl.h>  
#include <termios.h> 
#include <unistd.h>  
#include <errno.h> 

#include <iostream>

#include <thread>

int uart_int(void)
{
    int fd = -1;
    /*------------------------------- Opening the Serial Port -------------------------------*/
 
    fd = open("/dev/ttyACM0", O_RDWR | O_NOCTTY | O_NDELAY);	
    /* O_RDWR   - Read/Write access to serial port       */
    /* O_NOCTTY - No terminal will control the process   */
    /* Open in blocking mode,read will wait              */
 
    if(fd == -1) {
        printf("\n  Error! in Opening tty");
        return -1;
    }
    else {
        printf("\n  tty Opened Successfully ");
 
    }
    /*---------- Setting the Attributes of the serial port using termios structure --------- */
 
    /*RX init*/
    struct termios SerialPortSettings;	/* Create the structure                          */
 
    tcgetattr(fd, &SerialPortSettings);	/* Get the current attributes of the Serial port */
 
    /* Setting the Baud rate */
    cfsetispeed(&SerialPortSettings, B115200); /* Set Read  Speed as 9600                       */
    cfsetospeed(&SerialPortSettings, B115200); /* Set Write Speed as 9600                       */
 
    /* 8N1 Mode */
    SerialPortSettings.c_cflag &= ~PARENB;   /* Disables the Parity Enable bit(PARENB),So No Parity   */
    SerialPortSettings.c_cflag &= ~CSTOPB;   /* CSTOPB = 2 Stop bits,here it is cleared so 1 Stop bit */
    SerialPortSettings.c_cflag &= ~CSIZE;	 /* Clears the mask for setting the data size             */
    SerialPortSettings.c_cflag |=  CS8;      /* Set the data bits = 8                                 */
 
    SerialPortSettings.c_cflag &= ~CRTSCTS;       /* No Hardware flow Control                         */
    SerialPortSettings.c_cflag |= CREAD | CLOCAL; /* Enable receiver,Ignore Modem Control lines       */
 
 
    SerialPortSettings.c_iflag &= ~(IXON | IXOFF | IXANY);          /* Disable XON/XOFF flow control both i/p and o/p */
    SerialPortSettings.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);  /* Non Cannonical mode                            */
 
 
    SerialPortSettings.c_oflag &= ~OPOST;/*No Output Processing   raw  format  output*/
 
    /* Setting Time outs */
    SerialPortSettings.c_cc[VMIN] = 0; /* Read at least 10 characters */
    SerialPortSettings.c_cc[VTIME] = 1; /* Wait indefinetly   */
 
 
    if((tcsetattr(fd, TCSANOW, &SerialPortSettings)) != 0) /* Set the attributes to the termios structure*/
        printf("\n  ERROR ! in Setting attributes");
    else
        printf("\n  BaudRate = 115200 \n  StopBits = 1 \n  Parity   = none");
 
    /*------------------------------- Read data from serial port -----------------------------*/
 
    tcflush(fd, TCIFLUSH);   /* Discards old data in the rx buffer            */
 
    //close(fd); 
 
    return fd;
 
}
 
int fd = -1;
void threadRecv()
{
	char read_buffer[32];

	while(1){
       		int bytes_read = read(fd, &read_buffer, 32); /* Read the data                   */

        	if(bytes_read > 0) {
			
			std::cout<<"recved "<<bytes_read<<" bytes data" <<std::endl;

	        	if ( read_buffer[2] == 0x81 ) {

        	        	for( int i = 0; i < bytes_read; i++) 
                	        	std::cout<<(int)read_buffer[i]<<" ";
				std::cout<<std::endl;
            		}
            		else if ( read_buffer[2] == 0x80 ) {
                		for( int i = 0; i < bytes_read; i++) 
					std::cout<<(int)read_buffer[i]<<" ";
                                std::cout<<std::endl;
            		}
            		printf("\n +----------------------------------+\n\n\n");

        	}

    	}

}

void threadSend()
{
	while ( 1 ) {
		//char send_buff[10] = { 0x53, 0x59, 0x05, 0x02, 0x00, 0x01, 0x0f,  };
	}
}
 
int main(void)
{
 
    	printf("\n +----------------------------------+");
    	printf("\n |        Serial Port Read          |");
    	printf("\n +----------------------------------+");
 
    	fd = uart_int();
 
    	if(fd == -1)
        	printf("\n  Error! in Opening ttyUSB0  ");
    	else
        	printf("\n  ttyUSB0 Opened Successfully ");
 
	

 	std::thread t1( threadRecv );
	t1.join();

	while(1) {
	
	}

    	return 0;
}
